// Caman.Filter.register("blackAndWhite", function (grey) {
//   this.greyscale();
//   this.sepia(10);
//   this.exposure(10);
//   this.contrast(15);
//   return this.vignette("60%", 35);
// });

// Caman.Filter.register("bright", function (grey) {
//   this.brightness(7);
//   this.exposure(5);
//   this.contrast(16);
//   return this.vibrance(7);
// });

  renderPreset = function(preset) {
    var $filter, name;
    if (presetBusy) {
      return;
    }
    $("#PresetFilters a").removeClass('Active');
    $filter = $("#PresetFilters a[data-preset='" + preset + "']");
    name = $filter.html();
    $filter.addClass('Active').html('Rendering...');
    presetBusy = true;
    caman.revert(false);
    caman[preset]();
    return caman.render(function() {
      $filter.html(name);
      return presetBusy = false;
    });
  };


// // Generated by CoffeeScript 1.6.3
(function() {
  var busy, caman, changed, filters, presetBusy, caman, render, renderPreset,
    __hasProp = {}.hasOwnProperty;

    render = _.throttle(function() {
      var filter, value;
      if (busy) {
        changed = true;
        return;
      } else {
        changed = false;
      }
      busy = true;
      caman.revert(false);
      for (filter in filters) {
        if (!__hasProp.call(filters, filter)) continue;
        value = filters[filter];
        value = parseFloat(value, 10);
        if (value === 0) {
          continue;
        }
        caman[filter](value);
      }
      return caman.render(function() {
        busy = false;
        if (changed) {
          return render();
        }
      });
    }, 300);
  caman = "";

  caman = "";

  filters = {};

  busy = false;

  changed = false;

  presetBusy = false;

  renderPreset = function(preset) {
    var $filter, name;
    let oriWidth,oriHeight;
    if (presetBusy) {
      return;
    }
    $("#PresetFilters a").removeClass('Active');
    $filter = $("#PresetFilters a[data-preset='" + preset + "']");
    name = $filter.html();
    $filter.addClass('Active').html('Rendering...');
    presetBusy = true;
    caman.revert(false);
    caman[preset]();
    return caman.render(function() {
      $filter.html(name);
      return presetBusy = false;
    });
  };

  function resetFilters(){
    $(".FilterSetting input").each(function(){
      var filter, value;
      filter = $(this).data("filter");
      $(this).val(0);
      $(this).find("~ .FilterValue").html(0);
    })
  }

  function saveFilters(){
    caman.revert(false);
    $(".FilterSetting input").each(function(){
      var filter, value;
      filter = $(this).data("filter");
      value = $(this).val();
      if(value == 0) return;
      caman[filter](value);
    })
  }
  $(document).ready(function() {
    if (!($("#example").length > 0)) {
      return;
    }
    oriWidth = $("#example").width();
    oriHeight = $("#example").height();
    caman = Caman("#example");
    $(".FilterSetting input").each(function () {
      var filter;
      filter = $(this).data("filter");
      return (filters[filter] = $(this).val());
    });
    $("#rotate-container").on("click", "button", function () {
      if ($("#resize-w").val() != "" && $("#resize-h").val() != "") {
        caman.resize({
          width: $("#resize-w").val(),
          height: $("#resize-h").val(),
        });
      }
      if (
        $("#crop-w").val() != "" &&
        $("#crop-h").val() != "" &&
        $("#crop-w").val() != "" &&
        $("#crop-h").val() != ""
      )
        caman.crop(
          $("#crop-w").val(),
          $("#crop-h").val(),
          $("#crop-x").val(),
          $("#crop-y").val()
        );
      if ($("#angle").val()) caman.rotate($("#angle").val());

      caman.render();
      $("#example").width(caman.width);
      $("#example").height(caman.height);
      saveFilters();
      caman.render();
    });

    $("#Filter-container").on("change", ".FilterSetting input", function () {
      caman.revert(false);
      value = $(this).val();
      $(this).find("~ .FilterValue").html(value);
      saveFilters();
      caman.render();
      // caman.revert(false);
      // var filter, value;
      // filter = $(this).data("filter");
      // value = $(this).val();
      // caman[filter](value);
      
      // return render();
    });
    $("#PresetFilters").on("click", "a", function () {
      renderPreset($(this).data("preset"));
    });
    $('#reset').click(function () {
      caman.reset();
      caman.render();
      $("#example").width(caman.width);
      $("#example").height(caman.height);
      resetFilters();
    });
    $('#save').click(function () {
      caman.save('png');
    });
  });
}).call(this);
